{"version":3,"file":"component---src-pages-mint-tsx-043141a2d12d67b61edf.js","mappings":"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","sources":["webpack://dapp/./src/pages/mint.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport contractABI from \"../contracts/Undead.json\";\nimport \"./mint.css\";\nimport {\n  Button,\n  Box,\n  TextInput,\n  ResponsiveContext,\n  Grid,\n  Card,\n  Stack,\n  CardBody,\n  Image,\n  CardHeader,\n  Heading,\n  Text,\n} from \"grommet\";\nconst contractAddress = \"0x4a81E28d58DBDd0521Dfbcd905E7F9EC8cD80438\";\nimport { Undead } from \"../../gen/types/Undead\";\nimport Background from \"../assets/background.svg\";\nimport Moon from \"../assets/moon.svg\";\nimport Logo from \"../assets/undeadtownlogo.svg\";\nimport Hand from \"../assets/takemyhand.svg\";\nimport Luna from \"../assets/tombstone.svg\";\nimport Layout from \"../layouts/main\";\nimport BearKiller from \"../assets/bearkilla.svg\";\n\nconst getWindowEth = () => window !== undefined && window.ethereum;\n\nconst getWhitelistProof = (address: string, type: string) => {\n  return fetch(`/whitelist/${type}/${address}.json`)\n    .then((e) => e.json())\n    .then((e) => {\n      return e.proof;\n    });\n};\n\nconst requestConnectWallet = async () => {\n  const eth = getWindowEth();\n  if (eth) {\n    try {\n      const provider = new ethers.providers.Web3Provider(eth);\n      await provider.send(\"eth_requestAccounts\", []);\n      return await provider.getSigner();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n};\n\nconst mint = async (contract: any, walletAddress: any, quantity) => {\n  contract\n    ?.mint(quantity, { from: walletAddress, value: 0 })\n    .then((e) => {\n      console.log(e);\n    })\n    .catch((e) => {\n      console.log(e);\n    });\n};\n\nconst marketingMint = async (\n  contract: any,\n  proof: any,\n  quantity: number,\n  price = 25000000,\n  walletAddress: any\n) => {\n  console.log(proof);\n  console.log(quantity);\n  console.log(walletAddress);\n  return contract.publicSaleMint(quantity, {\n    from: walletAddress,\n    value: price * quantity,\n  });\n};\n\nconst callContract = async (contract: any, method: any, param: any) => {\n  return await contract[method](param);\n};\n\n// markup\nconst IndexPage = () => {\n  const size = React.useContext(ResponsiveContext);\n  const [contract, setContract] = useState<Undead | null>(null);\n  const [walletAddress, setWalletAddress] = useState<string | null>(null);\n  const [proof, setProof] = useState<string | null>(null);\n  const [mintQuantity, setMintQuantity] = useState<number>(1);\n  const [myNFT, setMyNFT] = useState<[]>([]);\n  const [nftMeta, setNftMeta] = useState<[]>([]);\n  const [message, setMessage] = useState<string>(\"\");\n  const getMyNFT = async (address: string) => {\n    return await callContract(contract, \"tokensOf\", address);\n  };\n\n  const getMetaFile = async (tokenId: number) => {\n    const url = await callContract(contract, \"tokenURI\", tokenId);\n    return fetch(url).then((e) => e.json());\n  };\n\n  const initializeContract = async () => {\n    const signer = await requestConnectWallet();\n    debugger;\n    if (signer) {\n      signer.getAddress().then((address) => {\n        setWalletAddress(address.toLowerCase());\n      });\n\n      const contractObject = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      ) as Undead;\n      setContract(contractObject);\n    }\n  };\n\n  useEffect(() => {\n    Promise.all(\n      myNFT.map((nftTokenId) => {\n        return getMetaFile(nftTokenId);\n      })\n    ).then((allMeta: any) => {\n      setNftMeta(allMeta);\n    });\n  }, [myNFT]);\n\n  return (\n    <Layout>\n      <div className=\"container\">\n        <audio autoplay=\"true\" controls hidden>\n          <source src=\"/assets/background_music.wav\" type=\"audio/ogg\" />\n          Your browser does not support the audio element.\n        </audio>\n        <div className=\"wallet\" onClick={() => initializeContract()}>\n          {walletAddress ? \"Connected\" : \"Connect wallet\"}\n        </div>\n        <ResponsiveContext.Consumer>\n          {(size) => {\n            return size === \"small\" ? (\n              <div className=\"flex-row\">\n                <div className=\"moon\">\n                  <Logo className=\"logo\"></Logo>\n                </div>\n\n                <div className=\"hand-c\">\n                  <Hand\n                    className=\"hand buttonSVG\"\n                    onClick={() => mint(contract, walletAddress, 1)}\n                  ></Hand>\n                </div>\n                <div className=\"luna-c\">\n                  <Luna className=\"luna\"></Luna>\n                </div>\n              </div>\n            ) : (\n              <>\n                <div className=\"flex-row\">\n                  <div className=\"moon\">\n                    <Logo className=\"logo\"></Logo>\n                  </div>\n\n                  <div className=\"luna-c\">\n                    <Hand\n                      className=\"hand buttonSVG\"\n                      onClick={() => mint(contract, walletAddress, 1)}\n                    ></Hand>\n                  </div>\n                  <div className=\"o-c\">\n                    <Luna className=\"luna\"></Luna>\n\n                    <BearKiller class=\"bearkilla\"></BearKiller>\n                  </div>\n                </div>\n              </>\n            );\n          }}\n        </ResponsiveContext.Consumer>\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"names":["requestConnectWallet","eth","undefined","window","ethereum","_context","provider","ethers","send","getSigner","console","log","mint","contract","walletAddress","quantity","from","value","then","e","catch","callContract","method","param","React","ResponsiveContext","useState","setContract","setWalletAddress","myNFT","setNftMeta","getMetaFile","tokenId","url","fetch","json","initializeContract","signer","getAddress","address","toLowerCase","contractObject","contractABI","useEffect","Promise","all","map","nftTokenId","allMeta","Layout","className","autoplay","controls","hidden","src","type","onClick","size","Logo","Hand","Luna","BearKiller","class"],"sourceRoot":""}